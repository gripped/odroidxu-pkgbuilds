diff -urN a/source/CMakeLists.txt b/source/CMakeLists.txt
--- a/source/CMakeLists.txt	2014-03-03 14:43:00.000000000 -0700
+++ b/source/CMakeLists.txt	2014-03-29 22:29:24.983771019 -0600

@@ -122,8 +130,8 @@
     if(X86 AND NOT X64)
         add_definitions(-march=i686)
     endif()
-    if(ARM)
-        add_definitions(-march=armv6 -mfloat-abi=hard -mfpu=vfp)
+    if(ARMV7)
+        add_definitions(-mfloat-abi=hard -mfpu=neon -fPIC)
     endif()
 endif(GCC)
 
diff -urN a/source/common/cpu.cpp b/source/common/cpu.cpp
--- a/source/common/cpu.cpp	2014-03-03 14:43:00.000000000 -0700
+++ b/source/common/cpu.cpp	2014-03-29 22:50:44.303843187 -0600
@@ -40,7 +40,7 @@
 #include <machine/cpu.h>
 #endif
 
-#if X265_ARCH_ARM && !defined(HAVE_NEON)
+#if X265_ARCH_ARM && (!defined(HAVE_NEON) || HAVE_NEON==0)
 #include <signal.h>
 #include <setjmp.h>
 static sigjmp_buf jmpbuf;
@@ -343,7 +343,6 @@
     }
 
     canjump = 1;
-    x265_cpu_neon_test();
     canjump = 0;
     signal(SIGILL, oldsig);
 #endif // if !HAVE_NEON
@@ -359,7 +358,7 @@
     // which may result in incorrect detection and the counters stuck enabled.
     // right now Apple does not seem to support performance counters for this test
 #ifndef __MACH__
-    flags |= x265_cpu_fast_neon_mrc_test() ? X265_CPU_FAST_NEON_MRC : 0;
+    //flags |= x265_cpu_fast_neon_mrc_test() ? X265_CPU_FAST_NEON_MRC : 0;
 #endif
     // TODO: write dual issue test? currently it's A8 (dual issue) vs. A9 (fast mrc)
 #endif // if HAVE_ARMV6
